#!/usr/bin/env python3
import os
import sys
import shutil
import subprocess

import common

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
REPO_ROOT = os.path.dirname(SCRIPT_DIR)

sys.path.insert(0, os.path.join(REPO_ROOT, "pythonlib"))
import buildlib

PYTHON_NAME_VERSION = "Python-" + common.PYTHON_VERSION
PYTHON_ARCHIVE_BASENAME = PYTHON_NAME_VERSION + ".tar.xz"
PYTHON_SRC_URL = "https://www.python.org/ftp/python/{}/{}".format(common.PYTHON_VERSION, PYTHON_ARCHIVE_BASENAME)

DOWNLOADS_DIR = os.path.join(REPO_ROOT, "downloads")

def appendSetupWithFile(setup_dst, from_file):
    buildlib.appendFile(setup_dst, "\n" + "# copied from " + from_file + "\n" + buildlib.readFile(from_file) + "\n")

def main():
    archive_path = os.path.join(DOWNLOADS_DIR, PYTHON_ARCHIVE_BASENAME)
    if not os.path.exists(archive_path):
        buildlib.makedirs(DOWNLOADS_DIR)
        buildlib.download(PYTHON_SRC_URL, archive_path)

    src_path = os.path.join(SCRIPT_DIR, PYTHON_NAME_VERSION)
    buildlib.rmtree(src_path)
    buildlib.run(["tar", "-C", SCRIPT_DIR, "-xf", archive_path])
    setup_dst = os.path.join(src_path, "Modules", "Setup.local")
    shutil.copyfile(os.path.join(SCRIPT_DIR, "Setup.local"), setup_dst)

    extra_config_args = []

    include_ctypes = True
    include_ssl = True

    extra_libs = set()

    if include_ctypes:
        extra_config_args.append("--with-system-ffi")
        extra_libs.add("-lffi")
        appendSetupWithFile(setup_dst, os.path.join(SCRIPT_DIR, "Setup.ctypes"))
    if include_ssl:
        result = buildlib.run(["pkg-config", "--static", "--libs", "openssl"], capture_output=True)
        libs = result.stdout.decode('utf8').split()
        print("OpenSSL static libraries: {}".format(libs))
        for lib in libs:
            extra_libs.add(lib)

        result = buildlib.run(["openssl", "version", "-d"], capture_output=True)
        prefix = b"OPENSSLDIR: \""
        assert(result.stdout.startswith(prefix))
        openssl_dir = result.stdout[len(prefix):]
        end = openssl_dir.find(b"\"")
        assert(end != -1)
        openssl_dir = openssl_dir[:end].decode('utf8')
        buildlib.appendFile(setup_dst, "# generated from build script:\nOPENSSL={}\n".format(openssl_dir))
        appendSetupWithFile(setup_dst, os.path.join(SCRIPT_DIR, "Setup.ssl"))

    if len(extra_libs) > 0:
        libs = ""
        for lib in extra_libs:
            libs += " " + lib
        extra_config_args.append("--with-libs=" + libs)

    buildlib.run(["./configure",
         "--prefix=" + common.OUT_DIR,
         "LDFLAGS=-static",
         "LINKFORSHARED= ",
    ] + extra_config_args, cwd=src_path)
    buildlib.rmtree(common.OUT_DIR)
    buildlib.run(["make", "install"] + buildlib.MAKE_PARALLEL_ARGS, cwd=src_path)

main()
